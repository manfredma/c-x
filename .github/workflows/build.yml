name: KV Storage Server - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [clang, gcc]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        # 安装必要的工具
        brew update
        brew install cmake ninja
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
        fi

    - name: Setup compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc-13" >> $GITHUB_ENV
          echo "CXX=g++-13" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -G Ninja

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} --parallel

    - name: Create web directory
      run: |
        mkdir -p ${{github.workspace}}/build/web
        cp -r ${{github.workspace}}/web/* ${{github.workspace}}/build/web/

    - name: Run basic tests
      working-directory: ${{github.workspace}}/build
      run: |
        # 测试程序是否能正常启动
        timeout 5s ./c_x --help || true

        # 测试程序是否能在后台启动
        ./c_x 8080 &
        SERVER_PID=$!
        sleep 2

        # 测试健康检查端点
        curl -f http://localhost:8080/health || exit 1

        # 测试 API 功能
        curl -f -X POST http://localhost:8080/api/test -d 'test_value' || exit 1
        curl -f http://localhost:8080/api/test | grep -q 'test_value' || exit 1
        curl -f -X DELETE http://localhost:8080/api/test || exit 1

        # 测试 Web 页面
        curl -f -o /dev/null http://localhost:8080/web/ || exit 1

        # 停止服务器
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true

        echo "✅ 所有测试通过！"

    - name: Run performance test
      if: matrix.build_type == 'Release'
      working-directory: ${{github.workspace}}/build
      run: |
        # 启动服务器
        ./c_x 8080 &
        SERVER_PID=$!
        sleep 2

        # 性能测试
        echo "🚀 运行性能测试..."

        # 并发测试
        for i in {1..10}; do
          curl -s -X POST http://localhost:8080/api/perf_test_$i -d "performance_test_data_$i" &
        done
        wait

        # 验证数据
        for i in {1..10}; do
          curl -s http://localhost:8080/api/perf_test_$i | grep -q "performance_test_data_$i" || exit 1
        done

        # 清理数据
        for i in {1..10}; do
          curl -s -X DELETE http://localhost:8080/api/perf_test_$i &
        done
        wait

        # 停止服务器
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true

        echo "✅ 性能测试通过！"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.build_type == 'Release' && matrix.compiler == 'clang'
      with:
        name: kv-server-macos-${{ matrix.build_type }}
        path: |
          ${{github.workspace}}/build/c_x
          ${{github.workspace}}/build/web/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    needs: build-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run static analysis
      run: |
        # 安装静态分析工具
        brew install cppcheck clang-format

        # 运行 cppcheck
        echo "🔍 运行 cppcheck 静态分析..."
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/ include/ || true

        # 检查代码格式
        echo "📝 检查代码格式..."
        find src include -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || true

    - name: Check for security issues
      run: |
        echo "🛡️ 检查安全问题..."

        # 检查是否使用了不安全的函数
        if grep -r "strcpy\|strcat\|sprintf\|gets" src/ include/; then
          echo "❌ 发现不安全的函数调用"
          exit 1
        fi

        # 检查是否有硬编码的密码或密钥
        if grep -ri "password\|secret\|key.*=" src/ include/ | grep -v "test\|example"; then
          echo "⚠️ 可能存在硬编码的敏感信息"
        fi

        echo "✅ 安全检查通过！"

  integration-test:
    name: Integration Test
    runs-on: macos-latest
    needs: build-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        brew install cmake ninja curl

    - name: Build project
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
        cmake --build build --parallel
        mkdir -p build/web
        cp -r web/* build/web/

    - name: Run integration tests
      working-directory: build
      run: |
        # 启动服务器
        ./c_x 9000 &
        SERVER_PID=$!
        sleep 3

        # 运行集成测试脚本
        if [ -f "../test_all_endpoints.sh" ]; then
          chmod +x ../test_all_endpoints.sh
          sed -i '' 's/8080/9000/g' ../test_all_endpoints.sh
          ../test_all_endpoints.sh
        fi

        # 测试动态端口功能
        if [ -f "../test_dynamic_port.sh" ]; then
          chmod +x ../test_dynamic_port.sh
          sed -i '' 's/8080/9000/g' ../test_dynamic_port.sh
          ../test_dynamic_port.sh
        fi

        # 测试 CORS 功能
        if [ -f "../test_cors_and_hosts.sh" ]; then
          chmod +x ../test_cors_and_hosts.sh
          sed -i '' 's/8080/9000/g' ../test_cors_and_hosts.sh
          ../test_cors_and_hosts.sh
        fi

        # 停止服务器
        kill $SERVER_PID
        wait $SERVER_PID 2>/dev/null || true

        echo "✅ 集成测试完成！"

  release:
    name: Create Release
    runs-on: macos-latest
    needs: [build-macos, security-scan, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build release version
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
        cmake --build build --parallel
        mkdir -p build/web
        cp -r web/* build/web/

    - name: Create release package
      run: |
        mkdir -p release
        cp build/c_x release/
        cp -r build/web release/
        cp README.md release/ 2>/dev/null || echo "# KV Storage Server" > release/README.md
        cp start_server.sh release/ 2>/dev/null || true

        # 创建启动脚本
        cat > release/start.sh << 'EOF'
        #!/bin/bash
        echo "🚀 启动 KV 存储服务器..."
        ./c_x 8080
        EOF
        chmod +x release/start.sh

        # 打包
        tar -czf kv-server-macos.tar.gz -C release .

    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: kv-server-release-macos
        path: kv-server-macos.tar.gz
        retention-days: 90

