name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-format:
    name: Code Format Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        brew install clang-format

    - name: Check code formatting
      run: |
        echo "📝 检查 C 代码格式..."

        # 检查所有 C 和头文件的格式
        find src include -name "*.c" -o -name "*.h" | while read file; do
          echo "检查文件: $file"
          if ! clang-format --dry-run --Werror "$file" > /dev/null 2>&1; then
            echo "❌ 文件 $file 格式不符合规范"
            echo "建议的格式化内容:"
            clang-format "$file"
            exit 1
          fi
        done

        echo "✅ 所有文件格式检查通过！"

    - name: Check line endings
      run: |
        echo "🔍 检查行结束符..."

        # 检查是否有 Windows 风格的行结束符
        if find src include web -type f \( -name "*.c" -o -name "*.h" -o -name "*.html" -o -name "*.js" -o -name "*.css" \) -exec grep -l $'\r' {} \; | head -1; then
          echo "❌ 发现 Windows 风格的行结束符 (CRLF)"
          echo "请使用 Unix 风格的行结束符 (LF)"
          exit 1
        fi

        echo "✅ 行结束符检查通过！"

  static-analysis:
    name: Static Analysis
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        brew install cppcheck scan-build

    - name: Run cppcheck
      run: |
        echo "🔍 运行 cppcheck 静态分析..."

        cppcheck \
          --enable=all \
          --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          --std=c99 \
          --platform=unix64 \
          --check-config \
          src/ include/ 2>&1 | tee cppcheck-report.txt

        echo "✅ cppcheck 分析完成！"

    - name: Run scan-build (Clang Static Analyzer)
      run: |
        echo "🔍 运行 Clang 静态分析器..."

        # 清理之前的构建
        rm -rf build

        # 使用 scan-build 进行静态分析
        scan-build \
          --status-bugs \
          --view-background \
          cmake -B build -DCMAKE_BUILD_TYPE=Debug

        scan-build \
          --status-bugs \
          --view-background \
          cmake --build build

        echo "✅ Clang 静态分析完成！"

    - name: Upload analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-reports
        path: |
          cppcheck-report.txt
          /tmp/scan-build-*
        retention-days: 7

  security-check:
    name: Security Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for unsafe functions
      run: |
        echo "🛡️ 检查不安全的函数调用..."

        # 定义不安全的函数列表
        UNSAFE_FUNCTIONS=(
          "strcpy" "strcat" "sprintf" "vsprintf"
          "gets" "scanf" "fscanf" "sscanf"
          "strncpy" "strncat" "snprintf" "vsnprintf"
        )

        FOUND_ISSUES=0

        for func in "${UNSAFE_FUNCTIONS[@]}"; do
          if grep -rn "\b$func\s*(" src/ include/; then
            echo "⚠️ 发现可能不安全的函数: $func"
            FOUND_ISSUES=1
          fi
        done

        if [ $FOUND_ISSUES -eq 1 ]; then
          echo "❌ 发现潜在的安全问题"
          echo "建议使用更安全的替代函数"
          exit 1
        fi

        echo "✅ 未发现不安全的函数调用！"

    - name: Check for hardcoded secrets
      run: |
        echo "🔍 检查硬编码的敏感信息..."

        # 检查可能的硬编码密码、密钥等
        PATTERNS=(
          "password\s*=\s*[\"'][^\"']+[\"']"
          "secret\s*=\s*[\"'][^\"']+[\"']"
          "key\s*=\s*[\"'][^\"']+[\"']"
          "token\s*=\s*[\"'][^\"']+[\"']"
          "api_key\s*=\s*[\"'][^\"']+[\"']"
        )

        FOUND_SECRETS=0

        for pattern in "${PATTERNS[@]}"; do
          if grep -rniE "$pattern" src/ include/ | grep -v "test\|example\|demo"; then
            echo "⚠️ 发现可能的硬编码敏感信息"
            FOUND_SECRETS=1
          fi
        done

        if [ $FOUND_SECRETS -eq 1 ]; then
          echo "❌ 发现潜在的硬编码敏感信息"
          echo "请使用环境变量或配置文件"
          exit 1
        fi

        echo "✅ 未发现硬编码的敏感信息！"

    - name: Check file permissions
      run: |
        echo "🔒 检查文件权限..."

        # 检查是否有可执行的源文件
        if find src include -name "*.c" -o -name "*.h" | xargs ls -la | grep "^-rwxr"; then
          echo "⚠️ 发现可执行的源文件"
          echo "源文件不应该有执行权限"
          exit 1
        fi

        # 检查脚本文件权限
        find . -name "*.sh" | while read script; do
          if [ ! -x "$script" ]; then
            echo "⚠️ 脚本文件 $script 没有执行权限"
          fi
        done

        echo "✅ 文件权限检查通过！"

  documentation-check:
    name: Documentation Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        echo "📚 检查文档完整性..."

        if [ ! -f "README.md" ]; then
          echo "❌ 缺少 README.md 文件"
          exit 1
        fi

        # 检查 README 是否包含基本信息
        REQUIRED_SECTIONS=(
          "# KV Storage Server"
          "## 功能特性"
          "## 快速开始"
          "## API 文档"
        )

        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -q "$section" README.md; then
            echo "⚠️ README.md 缺少章节: $section"
          fi
        done

        echo "✅ 文档检查完成！"

    - name: Check code comments
      run: |
        echo "💬 检查代码注释覆盖率..."

        # 统计函数和注释
        TOTAL_FUNCTIONS=$(grep -r "^[a-zA-Z_][a-zA-Z0-9_]*\s*(" src/ include/ | wc -l)
        COMMENTED_FUNCTIONS=$(grep -B1 -r "^[a-zA-Z_][a-zA-Z0-9_]*\s*(" src/ include/ | grep -c "//\|/\*" || echo 0)

        if [ $TOTAL_FUNCTIONS -gt 0 ]; then
          COMMENT_RATIO=$((COMMENTED_FUNCTIONS * 100 / TOTAL_FUNCTIONS))
          echo "函数总数: $TOTAL_FUNCTIONS"
          echo "有注释的函数: $COMMENTED_FUNCTIONS"
          echo "注释覆盖率: $COMMENT_RATIO%"

          if [ $COMMENT_RATIO -lt 50 ]; then
            echo "⚠️ 注释覆盖率较低，建议增加代码注释"
          fi
        fi

        echo "✅ 注释检查完成！"

  dependency-check:
    name: Dependency Check
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check CMake dependencies
      run: |
        echo "📦 检查 CMake 依赖..."

        if [ -f "CMakeLists.txt" ]; then
          # 检查 CMake 最低版本要求
          CMAKE_VERSION=$(grep "cmake_minimum_required" CMakeLists.txt | grep -o "[0-9]\+\.[0-9]\+")
          echo "CMake 最低版本要求: $CMAKE_VERSION"

          # 检查是否使用了外部依赖
          if grep -q "find_package\|FetchContent" CMakeLists.txt; then
            echo "发现外部依赖:"
            grep "find_package\|FetchContent" CMakeLists.txt
          fi
        fi

        echo "✅ 依赖检查完成！"

    - name: Check system requirements
      run: |
        echo "🖥️ 检查系统要求..."

        # 检查是否使用了 macOS 特定的功能
        if grep -r "kqueue\|kevent" src/ include/; then
          echo "✅ 检测到 kqueue 使用 (macOS/BSD 特性)"
        fi

        # 检查 C 标准
        if grep -r "c99\|c11\|c17" CMakeLists.txt; then
          echo "✅ 指定了 C 标准"
        fi

        echo "✅ 系统要求检查完成！"

